version: '3.4'

x-default-service: &svc
  build:
    args: &args
      VENDOR: ${VENDOR:-chadgrant}
      GROUP: ${GROUP:-sentex}
      SERVICE: ${SERVICE:-service-status}
      SERVICE_FRIENDLY: ${SERVICE_FRIENDLY:-Service Status}
      SERVICE_DESCRIPTION: ${SERVICE_DESCRIPTION:-Keeps track of services / deployments and health}
      SERVICE_URL: ${SERICE_URL:-http://localhost:8080}
      BUILD_HASH: ${BUILD_HASH:-localbuild_hashmissing}
      BUILD_USER: ${BUILD_USER:-unknown}
      BUILD_BRANCH: ${BUILD_BRANCH:-nobranch}
      BUILD_NUMBER: ${BUILD_NUMBER:-1.0.0}
      BUILD_DATE: ${BUILD_DATE}
      BUILD_REPO: ${BUILD_REPO}

volumes:
  mysql_data: {}

services:

  api:
      <<: *svc
      build:
        context: ./
        args:
          <<: *args
      image: ${DOCKER_REGISTRY:-docker.io}/${VENDOR:-chadgrant}/${DOCKER_IMAGE:-service-status}:${BUILD_NUMBER:-1.0.0}
      container_name: service_status_api
      restart: unless-stopped
      healthcheck:
        test: "curl -f http://localhost:8080/live || exit 1"
        interval: 30s
        timeout: 2s
        retries: 3
        start_period: 5s
      ports:
        - 5010:8080
      environment:
        MYSQL_DATABASE: service_status
        MYSQL_USER: docker
        MYSQL_PASSWORD: password
        MYSQL_HOST: data
        MYSQL_PORT: 3306

  tests:
    <<: *svc
    build:
      context: .
      dockerfile: tests/Dockerfile
      args:
        <<: *args
    image: ${DOCKER_REGISTRY:-docker.io}/${VENDOR:-chadgrant}/${DOCKER_TEST_IMG:-service-status-test}:${BUILD_NUMBER:-1.0.0}
    container_name: service_status_test
    depends_on:
      - data
      - api
    environment:
      MYSQL_DATABASE: service_status
      MYSQL_USER: docker
      MYSQL_PASSWORD: password
      MYSQL_HOST: data
      MYSQL_PORT: 3306
      TEST_INTEGRATION: 1

  #  ui:
  #     build:
  #       context: ./ui
  #     image: ${DOCKER_REGISTRY:-docker.io}/${VENDOR:-chadgrant}/${DOCKER_UI_IMG:-service-status-ui}:${BUILD_NUMBER:-1.0.0}
  #     container_name: service_status_ui
  #     restart: unless-stopped
  #     ports:
  #      - 6100:80
  #     environment:
  #       API_ENDPOINT: "http://localhost:5010"

  data:
    build:
      context: ./db
    image: ${DOCKER_REGISTRY:-docker.io}/${VENDOR:-chadgrant}/${DOCKER_DB_IMG:-service-status-db}:${BUILD_NUMBER:-1.0.0}
    container_name: service_status_data
    restart: unless-stopped
    ports:
      - 3306:3306
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: service_status
      MYSQL_USER: docker
      MYSQL_PASSWORD: password