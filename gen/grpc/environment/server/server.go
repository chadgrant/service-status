// Code generated by goa v3.0.9, DO NOT EDIT.
//
// environment gRPC server
//
// Command:
// $ goa gen github.com/chadgrant/servicestatus/design

package server

import (
	"context"

	environment "github.com/chadgrant/servicestatus/gen/environment"
	environmentpb "github.com/chadgrant/servicestatus/gen/grpc/environment/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the environmentpb.EnvironmentServer interface.
type Server struct {
	ListH   goagrpc.UnaryHandler
	AddH    goagrpc.UnaryHandler
	UpdateH goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the environment service endpoints.
func New(e *environment.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		ListH:   NewListHandler(e.List, uh),
		AddH:    NewAddHandler(e.Add, uh),
		UpdateH: NewUpdateHandler(e.Update, uh),
	}
}

// NewListHandler creates a gRPC handler which serves the "environment" service
// "list" endpoint.
func NewListHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeListResponse)
	}
	return h
}

// List implements the "List" method in environmentpb.EnvironmentServer
// interface.
func (s *Server) List(ctx context.Context, message *environmentpb.ListRequest) (*environmentpb.EnvironmentCollection, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "list")
	ctx = context.WithValue(ctx, goa.ServiceKey, "environment")
	resp, err := s.ListH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*environmentpb.EnvironmentCollection), nil
}

// NewAddHandler creates a gRPC handler which serves the "environment" service
// "add" endpoint.
func NewAddHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAddRequest, EncodeAddResponse)
	}
	return h
}

// Add implements the "Add" method in environmentpb.EnvironmentServer interface.
func (s *Server) Add(ctx context.Context, message *environmentpb.AddRequest) (*environmentpb.AddResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "add")
	ctx = context.WithValue(ctx, goa.ServiceKey, "environment")
	resp, err := s.AddH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*environmentpb.AddResponse), nil
}

// NewUpdateHandler creates a gRPC handler which serves the "environment"
// service "update" endpoint.
func NewUpdateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateRequest, EncodeUpdateResponse)
	}
	return h
}

// Update implements the "Update" method in environmentpb.EnvironmentServer
// interface.
func (s *Server) Update(ctx context.Context, message *environmentpb.UpdateRequest) (*environmentpb.UpdateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "update")
	ctx = context.WithValue(ctx, goa.ServiceKey, "environment")
	resp, err := s.UpdateH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*environmentpb.UpdateResponse), nil
}
