// Code generated by goa v3.0.9, DO NOT EDIT.
//
// environment gRPC server types
//
// Command:
// $ goa gen servicestatus/design

package server

import (
	environment "servicestatus/gen/environment"
	environmentviews "servicestatus/gen/environment/views"
	environmentpb "servicestatus/gen/grpc/environment/pb"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewEnvironmentCollection builds the gRPC response type from the result of
// the "list" endpoint of the "environment" service.
func NewEnvironmentCollection(result environmentviews.EnvironmentCollectionView) *environmentpb.EnvironmentCollection {
	message := &environmentpb.EnvironmentCollection{}
	message.Field = make([]*environmentpb.Environment1, len(result))
	for i, val := range result {
		message.Field[i] = &environmentpb.Environment1{}
		if val.Name != nil {
			message.Field[i].Name = *val.Name
		}
		if val.Friendly != nil {
			message.Field[i].Friendly = *val.Friendly
		}
		if val.Active != nil {
			message.Field[i].Active = *val.Active
		}
		if val.Sort != nil {
			message.Field[i].Sort = *val.Sort
		}
		if val.Created != nil {
			message.Field[i].Created = *val.Created
		}
		if val.Updated != nil {
			message.Field[i].Updated = *val.Updated
		}
		if val.Active == nil {
			message.Field[i].Active = true
		}
		if val.Sort == nil {
			message.Field[i].Sort = 0
		}
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "environment"
// service from the gRPC request type.
func NewAddPayload(message *environmentpb.AddRequest) *environment.EnvironmentBase {
	v := &environment.EnvironmentBase{
		Name:     message.Name,
		Friendly: message.Friendly,
		Active:   message.Active,
		Sort:     message.Sort,
	}
	if message.Key != "" {
		v.Key = &message.Key
	}
	if message.Sort == 0 {
		v.Sort = 0
	}
	return v
}

// NewAddResponse builds the gRPC response type from the result of the "add"
// endpoint of the "environment" service.
func NewAddResponse(result string) *environmentpb.AddResponse {
	message := &environmentpb.AddResponse{}
	message.Field = result
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the
// "environment" service from the gRPC request type.
func NewUpdatePayload(message *environmentpb.UpdateRequest) *environment.EnvironmentBase {
	v := &environment.EnvironmentBase{
		Name:     message.Name,
		Friendly: message.Friendly,
		Active:   message.Active,
		Sort:     message.Sort,
	}
	if message.Key != "" {
		v.Key = &message.Key
	}
	if message.Sort == 0 {
		v.Sort = 0
	}
	return v
}

// NewUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "environment" service.
func NewUpdateResponse() *environmentpb.UpdateResponse {
	message := &environmentpb.UpdateResponse{}
	return message
}

// ValidateAddRequest runs the validations defined on AddRequest.
func ValidateAddRequest(message *environmentpb.AddRequest) (err error) {
	if utf8.RuneCountInString(message.Name) > 150 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 150, false))
	}
	if utf8.RuneCountInString(message.Friendly) > 150 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.friendly", message.Friendly, utf8.RuneCountInString(message.Friendly), 150, false))
	}
	if message.Sort != 0 {
		if message.Sort < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.sort", message.Sort, 0, true))
		}
	}
	if message.Sort != 0 {
		if message.Sort > 5000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.sort", message.Sort, 5000, false))
		}
	}
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *environmentpb.UpdateRequest) (err error) {
	if utf8.RuneCountInString(message.Name) > 150 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 150, false))
	}
	if utf8.RuneCountInString(message.Friendly) > 150 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.friendly", message.Friendly, utf8.RuneCountInString(message.Friendly), 150, false))
	}
	if message.Sort != 0 {
		if message.Sort < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.sort", message.Sort, 0, true))
		}
	}
	if message.Sort != 0 {
		if message.Sort > 5000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.sort", message.Sort, 5000, false))
		}
	}
	return
}
