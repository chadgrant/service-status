// Code generated by goa v3.0.9, DO NOT EDIT.
//
// environment gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/chadgrant/servicestatus/design

package server

import (
	"context"

	environment "github.com/chadgrant/servicestatus/gen/environment"
	environmentviews "github.com/chadgrant/servicestatus/gen/environment/views"
	environmentpb "github.com/chadgrant/servicestatus/gen/grpc/environment/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeListResponse encodes responses from the "environment" service "list"
// endpoint.
func EncodeListResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(environmentviews.EnvironmentCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("environment", "list", "environmentviews.EnvironmentCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewEnvironmentCollection(result)
	return resp, nil
}

// EncodeAddResponse encodes responses from the "environment" service "add"
// endpoint.
func EncodeAddResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("environment", "add", "string", v)
	}
	resp := NewAddResponse(result)
	return resp, nil
}

// DecodeAddRequest decodes requests sent to "environment" service "add"
// endpoint.
func DecodeAddRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *environmentpb.AddRequest
		ok      bool
	)
	{
		if message, ok = v.(*environmentpb.AddRequest); !ok {
			return nil, goagrpc.ErrInvalidType("environment", "add", "*environmentpb.AddRequest", v)
		}
		if err := ValidateAddRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *environment.EnvironmentBase
	{
		payload = NewAddPayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "environment" service
// "update" endpoint.
func EncodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewUpdateResponse()
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "environment" service "update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *environmentpb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*environmentpb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("environment", "update", "*environmentpb.UpdateRequest", v)
		}
		if err := ValidateUpdateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *environment.EnvironmentBase
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}
