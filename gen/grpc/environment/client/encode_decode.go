// Code generated by goa v3.0.9, DO NOT EDIT.
//
// environment gRPC client encoders and decoders
//
// Command:
// $ goa gen servicestatus/design

package client

import (
	"context"
	environment "servicestatus/gen/environment"
	environmentviews "servicestatus/gen/environment/views"
	environmentpb "servicestatus/gen/grpc/environment/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildListFunc builds the remote method to invoke for "environment" service
// "list" endpoint.
func BuildListFunc(grpccli environmentpb.EnvironmentClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*environmentpb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &environmentpb.ListRequest{}, opts...)
	}
}

// DecodeListResponse decodes responses from the environment list endpoint.
func DecodeListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*environmentpb.EnvironmentCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("environment", "list", "*environmentpb.EnvironmentCollection", v)
	}
	res := NewListResult(message)
	vres := environmentviews.EnvironmentCollection{Projected: res, View: view}
	if err := environmentviews.ValidateEnvironmentCollection(vres); err != nil {
		return nil, err
	}
	return environment.NewEnvironmentCollection(vres), nil
}

// BuildAddFunc builds the remote method to invoke for "environment" service
// "add" endpoint.
func BuildAddFunc(grpccli environmentpb.EnvironmentClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*environmentpb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &environmentpb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to environment add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*environment.EnvironmentBase)
	if !ok {
		return nil, goagrpc.ErrInvalidType("environment", "add", "*environment.EnvironmentBase", v)
	}
	return NewAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the environment add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*environmentpb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("environment", "add", "*environmentpb.AddResponse", v)
	}
	res := NewAddResult(message)
	return res, nil
}

// BuildUpdateFunc builds the remote method to invoke for "environment" service
// "update" endpoint.
func BuildUpdateFunc(grpccli environmentpb.EnvironmentClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Update(ctx, reqpb.(*environmentpb.UpdateRequest), opts...)
		}
		return grpccli.Update(ctx, &environmentpb.UpdateRequest{}, opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to environment update endpoint.
func EncodeUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*environment.EnvironmentBase)
	if !ok {
		return nil, goagrpc.ErrInvalidType("environment", "update", "*environment.EnvironmentBase", v)
	}
	return NewUpdateRequest(payload), nil
}
