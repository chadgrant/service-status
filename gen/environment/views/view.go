// Code generated by goa v3.0.9, DO NOT EDIT.
//
// environment views
//
// Command:
// $ goa gen github.com/chadgrant/servicestatus/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// EnvironmentCollection is the viewed result type that is projected based on a
// view.
type EnvironmentCollection struct {
	// Type to project
	Projected EnvironmentCollectionView
	// View to render
	View string
}

// EnvironmentCollectionView is a type that runs validations on a projected
// type.
type EnvironmentCollectionView []*EnvironmentView

// EnvironmentView is a type that runs validations on a projected type.
type EnvironmentView struct {
	// Name of environment
	Name *string
	// url friendly name of environment used for REST based operations
	Friendly *string
	// is environment active
	Active *bool
	// useful for sorting in UI
	Sort *uint32
	// timestamp of when environment was created
	Created *string
	// timestamp of when environment was updated
	Updated *string
}

var (
	// EnvironmentCollectionMap is a map of attribute names in result type
	// EnvironmentCollection indexed by view name.
	EnvironmentCollectionMap = map[string][]string{
		"default": []string{
			"friendly",
			"name",
			"active",
			"sort",
			"created",
			"updated",
		},
	}
	// EnvironmentMap is a map of attribute names in result type Environment
	// indexed by view name.
	EnvironmentMap = map[string][]string{
		"default": []string{
			"friendly",
			"name",
			"active",
			"sort",
			"created",
			"updated",
		},
	}
)

// ValidateEnvironmentCollection runs the validations defined on the viewed
// result type EnvironmentCollection.
func ValidateEnvironmentCollection(result EnvironmentCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateEnvironmentCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateEnvironmentCollectionView runs the validations defined on
// EnvironmentCollectionView using the "default" view.
func ValidateEnvironmentCollectionView(result EnvironmentCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateEnvironmentView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEnvironmentView runs the validations defined on EnvironmentView
// using the "default" view.
func ValidateEnvironmentView(result *EnvironmentView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Friendly == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("friendly", "result"))
	}
	if result.Friendly != nil {
		if utf8.RuneCountInString(*result.Friendly) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.friendly", *result.Friendly, utf8.RuneCountInString(*result.Friendly), 150, false))
		}
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 150, false))
		}
	}
	if result.Sort != nil {
		if *result.Sort < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.sort", *result.Sort, 0, true))
		}
	}
	if result.Sort != nil {
		if *result.Sort > 5000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.sort", *result.Sort, 5000, false))
		}
	}
	if result.Created != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created", *result.Created, goa.FormatDateTime))
	}
	if result.Updated != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated", *result.Updated, goa.FormatDateTime))
	}
	return
}
