// Code generated by goa v3.0.9, DO NOT EDIT.
//
// servicestatus HTTP client CLI support package
//
// Command:
// $ goa gen github.com/chadgrant/servicestatus/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	environmentc "github.com/chadgrant/servicestatus/gen/http/environment/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `environment (list|add|update)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` environment list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		environmentFlags = flag.NewFlagSet("environment", flag.ContinueOnError)

		environmentListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		environmentAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		environmentAddBodyFlag = environmentAddFlags.String("body", "REQUIRED", "")

		environmentUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		environmentUpdateBodyFlag = environmentUpdateFlags.String("body", "REQUIRED", "")
		environmentUpdateKeyFlag  = environmentUpdateFlags.String("key", "REQUIRED", "used for update case of changing key, PUT /environment/key")
	)
	environmentFlags.Usage = environmentUsage
	environmentListFlags.Usage = environmentListUsage
	environmentAddFlags.Usage = environmentAddUsage
	environmentUpdateFlags.Usage = environmentUpdateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "environment":
			svcf = environmentFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "environment":
			switch epn {
			case "list":
				epf = environmentListFlags

			case "add":
				epf = environmentAddFlags

			case "update":
				epf = environmentUpdateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "environment":
			c := environmentc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "add":
				endpoint = c.Add()
				data, err = environmentc.BuildAddPayload(*environmentAddBodyFlag)
			case "update":
				endpoint = c.Update()
				data, err = environmentc.BuildUpdatePayload(*environmentUpdateBodyFlag, *environmentUpdateKeyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// environmentUsage displays the usage of the environment command and its
// subcommands.
func environmentUsage() {
	fmt.Fprintf(os.Stderr, `The environment service performs operations on environments
Usage:
    %s [globalflags] environment COMMAND [flags]

COMMAND:
    list: List all environments
    add: adds a new environment and returns the url of where to retrieve it
    update: update an existing environment

Additional help:
    %s environment COMMAND --help
`, os.Args[0], os.Args[0])
}
func environmentListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] environment list

List all environments

Example:
    `+os.Args[0]+` environment list
`, os.Args[0])
}

func environmentAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] environment add -body JSON

adds a new environment and returns the url of where to retrieve it
    -body JSON: 

Example:
    `+os.Args[0]+` environment add --body '{
      "active": true,
      "friendly": "development",
      "key": "Quas alias tempore veritatis aspernatur.",
      "name": "Production",
      "sort": 0
   }'
`, os.Args[0])
}

func environmentUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] environment update -body JSON -key STRING

update an existing environment
    -body JSON: 
    -key STRING: used for update case of changing key, PUT /environment/key

Example:
    `+os.Args[0]+` environment update --body '{
      "active": true,
      "friendly": "development",
      "name": "Production",
      "sort": 0
   }' --key "Voluptatum est incidunt perspiciatis eos quasi."
`, os.Args[0])
}
