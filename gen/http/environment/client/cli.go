// Code generated by goa v3.0.9, DO NOT EDIT.
//
// environment HTTP client CLI support package
//
// Command:
// $ goa gen github.com/chadgrant/servicestatus/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	environment "github.com/chadgrant/servicestatus/gen/environment"
	goa "goa.design/goa/v3/pkg"
)

// BuildAddPayload builds the payload for the environment add endpoint from CLI
// flags.
func BuildAddPayload(environmentAddBody string) (*environment.EnvironmentBase, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(environmentAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"active\": true,\n      \"friendly\": \"development\",\n      \"key\": \"Quas alias tempore veritatis aspernatur.\",\n      \"name\": \"Production\",\n      \"sort\": 0\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 150, false))
		}
		if utf8.RuneCountInString(body.Friendly) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.friendly", body.Friendly, utf8.RuneCountInString(body.Friendly), 150, false))
		}
		if body.Sort < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sort", body.Sort, 0, true))
		}
		if body.Sort > 5000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sort", body.Sort, 5000, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &environment.EnvironmentBase{
		Name:     body.Name,
		Friendly: body.Friendly,
		Active:   body.Active,
		Sort:     body.Sort,
		Key:      body.Key,
	}
	return v, nil
}

// BuildUpdatePayload builds the payload for the environment update endpoint
// from CLI flags.
func BuildUpdatePayload(environmentUpdateBody string, environmentUpdateKey string) (*environment.EnvironmentBase, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(environmentUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"active\": true,\n      \"friendly\": \"development\",\n      \"name\": \"Production\",\n      \"sort\": 0\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 150, false))
		}
		if utf8.RuneCountInString(body.Friendly) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.friendly", body.Friendly, utf8.RuneCountInString(body.Friendly), 150, false))
		}
		if body.Sort < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sort", body.Sort, 0, true))
		}
		if body.Sort > 5000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sort", body.Sort, 5000, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var key string
	{
		key = environmentUpdateKey
	}
	v := &environment.EnvironmentBase{
		Name:     body.Name,
		Friendly: body.Friendly,
		Active:   body.Active,
		Sort:     body.Sort,
	}
	v.Key = &key
	return v, nil
}
