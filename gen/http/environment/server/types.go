// Code generated by goa v3.0.9, DO NOT EDIT.
//
// environment HTTP server types
//
// Command:
// $ goa gen github.com/chadgrant/servicestatus/design

package server

import (
	"unicode/utf8"

	environment "github.com/chadgrant/servicestatus/gen/environment"
	environmentviews "github.com/chadgrant/servicestatus/gen/environment/views"
	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "environment" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Name of environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// url friendly name of environment used for REST based operations
	Friendly *string `form:"friendly,omitempty" json:"friendly,omitempty" xml:"friendly,omitempty"`
	// is environment active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// useful for sorting in UI
	Sort *uint32 `form:"sort,omitempty" json:"sort,omitempty" xml:"sort,omitempty"`
	// used for update case of changing key, PUT /environment/key
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
}

// UpdateRequestBody is the type of the "environment" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// Name of environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// url friendly name of environment used for REST based operations
	Friendly *string `form:"friendly,omitempty" json:"friendly,omitempty" xml:"friendly,omitempty"`
	// is environment active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// useful for sorting in UI
	Sort *uint32 `form:"sort,omitempty" json:"sort,omitempty" xml:"sort,omitempty"`
}

// EnvironmentResponseCollection is the type of the "environment" service
// "list" endpoint HTTP response body.
type EnvironmentResponseCollection []*EnvironmentResponse

// UpdateNotFoundResponseBody is the type of the "environment" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// friendly name of environment
	Name string `form:"name" json:"name" xml:"name"`
}

// EnvironmentResponse is used to define fields on response body types.
type EnvironmentResponse struct {
	// url friendly name of environment used for REST based operations
	Friendly string `form:"friendly" json:"friendly" xml:"friendly"`
	// Name of environment
	Name string `form:"name" json:"name" xml:"name"`
	// is environment active
	Active bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// useful for sorting in UI
	Sort uint32 `form:"sort,omitempty" json:"sort,omitempty" xml:"sort,omitempty"`
	// timestamp of when environment was created
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// timestamp of when environment was updated
	Updated *string `form:"updated,omitempty" json:"updated,omitempty" xml:"updated,omitempty"`
}

// NewEnvironmentResponseCollection builds the HTTP response body from the
// result of the "list" endpoint of the "environment" service.
func NewEnvironmentResponseCollection(res environmentviews.EnvironmentCollectionView) EnvironmentResponseCollection {
	body := make([]*EnvironmentResponse, len(res))
	for i, val := range res {
		body[i] = &EnvironmentResponse{
			Name:     *val.Name,
			Friendly: *val.Friendly,
			Created:  val.Created,
			Updated:  val.Updated,
		}
		if val.Active != nil {
			body[i].Active = *val.Active
		}
		if val.Sort != nil {
			body[i].Sort = *val.Sort
		}
		if val.Active == nil {
			body[i].Active = true
		}
		if val.Sort == nil {
			body[i].Sort = 0
		}
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "environment" service.
func NewUpdateNotFoundResponseBody(res *environment.NotFound) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewAddEnvironmentBase builds a environment service add endpoint payload.
func NewAddEnvironmentBase(body *AddRequestBody) *environment.EnvironmentBase {
	v := &environment.EnvironmentBase{
		Name:     *body.Name,
		Friendly: *body.Friendly,
		Key:      body.Key,
	}
	if body.Active != nil {
		v.Active = *body.Active
	}
	if body.Sort != nil {
		v.Sort = *body.Sort
	}
	if body.Active == nil {
		v.Active = true
	}
	if body.Sort == nil {
		v.Sort = 0
	}
	return v
}

// NewUpdateEnvironmentBase builds a environment service update endpoint
// payload.
func NewUpdateEnvironmentBase(body *UpdateRequestBody, key string) *environment.EnvironmentBase {
	v := &environment.EnvironmentBase{
		Name:     *body.Name,
		Friendly: *body.Friendly,
	}
	if body.Active != nil {
		v.Active = *body.Active
	}
	if body.Sort != nil {
		v.Sort = *body.Sort
	}
	if body.Active == nil {
		v.Active = true
	}
	if body.Sort == nil {
		v.Sort = 0
	}
	v.Key = &key
	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Friendly == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("friendly", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 150, false))
		}
	}
	if body.Friendly != nil {
		if utf8.RuneCountInString(*body.Friendly) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.friendly", *body.Friendly, utf8.RuneCountInString(*body.Friendly), 150, false))
		}
	}
	if body.Sort != nil {
		if *body.Sort < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sort", *body.Sort, 0, true))
		}
	}
	if body.Sort != nil {
		if *body.Sort > 5000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sort", *body.Sort, 5000, false))
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Friendly == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("friendly", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 150, false))
		}
	}
	if body.Friendly != nil {
		if utf8.RuneCountInString(*body.Friendly) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.friendly", *body.Friendly, utf8.RuneCountInString(*body.Friendly), 150, false))
		}
	}
	if body.Sort != nil {
		if *body.Sort < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sort", *body.Sort, 0, true))
		}
	}
	if body.Sort != nil {
		if *body.Sort > 5000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sort", *body.Sort, 5000, false))
		}
	}
	return
}

// ValidateEnvironmentResponse runs the validations defined on
// EnvironmentResponse
func ValidateEnvironmentResponse(body *EnvironmentResponse) (err error) {
	if utf8.RuneCountInString(body.Friendly) > 150 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.friendly", body.Friendly, utf8.RuneCountInString(body.Friendly), 150, false))
	}
	if utf8.RuneCountInString(body.Name) > 150 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 150, false))
	}
	if body.Sort < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.sort", body.Sort, 0, true))
	}
	if body.Sort > 5000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.sort", body.Sort, 5000, false))
	}
	if body.Created != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created", *body.Created, goa.FormatDateTime))
	}
	if body.Updated != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated", *body.Updated, goa.FormatDateTime))
	}
	return
}
